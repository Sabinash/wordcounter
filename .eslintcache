[{"D:\\JavaScriptProjects\\wordcounter\\src\\App.js":"1","D:\\JavaScriptProjects\\wordcounter\\src\\reportWebVitals.js":"2"},{"size":3235,"mtime":1609252713790,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":1609244792637,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"8xhszn",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\JavaScriptProjects\\wordcounter\\src\\App.js",["11","12","13","14","15"],"import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { compose } from 'ramda';\nimport detectBrowserLanguage from 'detect-browser-language'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      charCount: 0,\n      wordCount: 0,\n      sentenceCount: 0,\n      paragraphCount: 0,\n      lang: \"Shows Browser's Language\"\n    };\n  }\n\n  removeBreaks = arr => {\n    const index = arr.findIndex(el => el.match(/\\r?\\n|\\r/g));\n    if (index === -1)\n      return arr;\n    const newArray = [\n      ...arr.slice(0, index),\n      ...arr[index].split(/\\r?\\n|\\r/),\n      ...arr.slice(index + 1, arr.length)\n    ];\n    return this.removeBreaks(newArray);\n  }\n\n\n  removeEmptyElements = arr => {\n    const index = arr.findIndex(el => el.trim() === '');\n    if (index === -1)\n      return arr;\n    arr.splice(index, 1);\n    return this.removeEmptyElements(arr)\n  };\n\n  reSet(value) {\n    const trimmedValue = value.trim();\n    const words = compose(this.removeEmptyElements, this.removeBreaks)(trimmedValue.split(' '));\n    const sentences = compose(this.removeEmptyElements, this.removeBreaks)(trimmedValue.split('.'));\n    const paragraphs = this.removeEmptyElements(trimmedValue.split(/\\r?\\n|\\r/));\n    this.setState({\n      text: value,\n      charCount: trimmedValue.length,\n      wordCount: value === '' ? 0 : words.length,\n      sentenceCount: value === '' ? 0 : sentences.length,\n      paragraphCount: value === '' ? 0 : paragraphs.length,\n      lang: value === '' ? 'unknown' : detectBrowserLanguage()\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center\">\n          Word Counter\n          </h1>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <textarea rows=\"10\" cols=\"30\" className=\"form-control\" type=\"file\" name=\"json\" id=\"\"\n              placeholder='Type or paste...'\n              onChange={event => this.reSet(event.target.value)}\n              required></textarea>\n          </div>\n        </form>\n\n        <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\n          <div class=\"navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2\">\n            <ul class=\"navbar-nav mr-auto\">\n              <li class=\"nav-item active\">\n                <a class=\"nav-link\" >Language: {this.state.lang}</a>\n              </li>\n              <li class=\"nav-item active\">\n                <a class=\"nav-link\" >Characters: {this.state.charCount}</a>\n              </li>\n              <li class=\"nav-item active\">\n                <a class=\"nav-link\" >Words: {this.state.wordCount}</a>\n              </li>\n              <li class=\"nav-item active\">\n                <a class=\"nav-link\">Sentences:  {this.state.sentenceCount}</a>\n              </li>\n              <li class=\"nav-item active\">\n                <a class=\"nav-link\" >Paragraphs: {this.state.paragraphCount}</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div class=\"mt-3\">\n          <p class=\"col-xs-12\" className=\"text-center text-muted\" >Â© Copyright SekharTech 2020 Word Counter</p>\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\n\n","D:\\JavaScriptProjects\\wordcounter\\src\\reportWebVitals.js",[],{"ruleId":"16","severity":1,"message":"17","line":74,"column":17,"nodeType":"18","endLine":74,"endColumn":38},{"ruleId":"16","severity":1,"message":"17","line":77,"column":17,"nodeType":"18","endLine":77,"endColumn":38},{"ruleId":"16","severity":1,"message":"17","line":80,"column":17,"nodeType":"18","endLine":80,"endColumn":38},{"ruleId":"16","severity":1,"message":"17","line":83,"column":17,"nodeType":"18","endLine":83,"endColumn":37},{"ruleId":"16","severity":1,"message":"17","line":86,"column":17,"nodeType":"18","endLine":86,"endColumn":38},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]